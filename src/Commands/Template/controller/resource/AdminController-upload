<?php

namespace {{{namespace}}};

use {{{appName}}}Http\Requests;
use {{{appName}}}Http\Controllers\Controller;
use {{{appName}}}Http\Controllers\{{{section}}}\Models\{{{section}}};
use {{{appName}}}Http\Controllers\{{{section}}}\Requests\{{{type}}}{{{onlyName}}}Request;
use File;
use Image;

class {{{name}}} extends Controller
{
    public $uploadPath = 'uploads/{{{sectionLower}}}/';

    public $imageSize = [
        [
            'width'     =>  1280,
            'height'    =>  720
        ]
    ];

    public function index()
    {
        $items = {{{section}}}::filter()->latest()->paginate(20);

        return view('{{{section}}}.views{{{viewType}}}.{{{sectionLower}}}.index', compact('items'));
    }

    public function create()
    {
        return view('{{{section}}}.views{{{viewType}}}.{{{sectionLower}}}.add');
    }

    public function store({{{onlyName}}}Request $request)
    {
        $item             = new {{{section}}}();
        $item->title       = $request->get('title');
        if ($request->hasFile('picture')) {

            if (!File::isDirectory(public_path($this->uploadPath))) {
                File::makeDirectory(public_path($this->uploadPath), 0775, true);
            }

            $file               = $request->file('picture');
            $realPath           = $file->getRealPath();
            $destinationPath    = public_path($this->uploadPath);
            $fileName           = time().$file->hashName();

            Image::make($realPath)->widen(1920, function ($constraint) {
                $constraint->upsize();
            })->save($destinationPath.$fileName, 90);

            $this->createImages($realPath, $fileName);

            $item->picture = $fileName;
        }
        $item->save();

        return redirect()->action('{{{section}}}\Controllers\{{{type}}}{{{name}}}@index')->with('success', 'اطلاعات با موفقیت ذخیره شد');

    }

    public function edit($id)
    {
        $item = {{{section}}}::findOrFail($id);
        return view('{{{section}}}.views{{{viewType}}}.{{{sectionLower}}}.edit', compact('item'));
    }

    public function update({{{onlyName}}}Request $request, $id)
    {
        $item = {{{section}}}::findOrFail($id);
        $item->title       = $request->get('title');
        if ($request->hasFile('picture')) {

            removeImage($this->uploadPath,$item->picture);

            $file               = $request->file('picture');
            $realPath           = $file->getRealPath();
            $destinationPath    = public_path($this->uploadPath);
            $fileName           = time().$file->hashName();

            Image::make($realPath)->widen(1920, function ($constraint) {
                $constraint->upsize();
            })->save($destinationPath.$fileName, 90);

            $this->createImages($realPath, $fileName);

            $item->picture = $fileName;
        }else {
            if ($request->get('file_remove') == 1) {
                removeImage($this->uploadPath,$item->picture);
                $item->picture = null;
            }
        }
        $item->save();

        return redirect()->action('{{{section}}}\Controllers\{{{type}}}{{{name}}}@index')->with('success', 'اطلاعات با موفقیت ذخیره شد');

    }

    public function destroy({{{onlyName}}}Request $request)
    {
        $items  = {{{section}}}::whereIn('id', $request->get('deleteId'))->get();

        foreach ($items as $item) {
            removeImage($this->uploadPath,$item->picture);
        }

        {{{section}}}::whereIn('id', $request->get('deleteId'))->delete();

        return redirect()->back()->with('success', 'اطلاعات با موفقیت حذف شد');
    }

    
}
